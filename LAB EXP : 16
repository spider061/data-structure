#include<stdio.h>
 #include<stdlib.h>
 typedef struct TreeNode{
     struct TreeNode* left;
     int data;
     struct TreeNode* right;
 }Node;
 struct TreeNode* createNode(int data){
     Node* newNode = (Node*)malloc(sizeof(Node));
     newNode->data = data;
     newNode->left=newNode->right=NULL;
     return newNode;
 }
 Node* insert(Node* root,int value){
     if(root==NULL)
     return createNode(value);
     else if(value<root->data)
     root->left = insert(root->left,value);
     else if(value>root->data)
     root->right = insert(root->right,value);
 }
 void preorder(struct TreeNode* root){
     if(root!=NULL){
     printf("%d ",root->data);
     preorder(root->left);
     preorder(root->right);
     }
 }
 void inorder(struct TreeNode* root){
      if(root!=NULL){
     inorder(root->left);
     printf("%d ",root->data);
     inorder(root->right);
     }
 }
 void postorder(struct TreeNode* root){
  if(root!=NULL){
     postorder(root->left);
     postorder(root->right);
     printf("%d ",root->data);
  }
 }
 Node* search(struct TreeNode* root,int value){
         if(root==NULL)
         return NULL;
         else if(root->data == value)
         return root;
         else if(value<root->data)
         return search(root->left,value);
         else 
         return search(root->right,value);
 }
 Node* findmin(Node* root){
     while(root->left!=NULL){
         root = root->left;
     }
     return root;
 }
 Node* delete(struct TreeNode* root,int value){
     if(root==NULL)
     return NULL;
     else if(value<root->data)
   root->left = delete(root->left,value);
     else if(value>root->data)
     root->right = delete(root->right,value);
     else{
         if(root->left==NULL && root->right==NULL){
         free(root);
         return NULL;
         }
         else if(root->right==NULL){
             Node* temp = root->left;
             free(root);
             return temp;
         }
         else if(root->left==NULL){
             Node* temp = root->right;
             free(root);
             return temp;
         }
         else{
             Node* temp = findmin(root->right);
             root->data = temp->data;
             delete(root->right,temp->data);
 
         }
     }
 
 }
 int main (){
         int choice,value;
         Node* root = NULL;
         while(1){
             printf("1.Insert\n");
             printf("2.Preorder\n");
             printf("3.Inorder\n");
             printf("4.Postorder\n");
             printf("5. Search\n");
             printf("6. Delete\n");
             printf("7.Exit\n");
             printf("Enter the choice = ");
             scanf("%d",&choice);
             switch(choice){
                 case 1:
                 printf("Enter value to insert: ");
                 scanf("%d", &value);
                 root = insert(root, value);
                 break;
             
             case 2:
                 printf("Preorder Traversal: ");
                 preorder(root);
                 printf("\n");
                 break;
             
             case 3:
                 printf("Inorder Traversal: ");
                 inorder(root);
                 printf("\n");
                 break;
             
             case 4:
                 printf("Postorder Traversal: ");
                 postorder(root);
                 printf("\n");
                 break;
             
             case 5:
                 printf("Enter value to search: ");
                 scanf("%d", &value);
                 if (search(root, value))
                     printf("Value found!\n");
                 else
                     printf("Value not found!\n");
                 break;
             
             case 6:
                 printf("Enter value to delete: ");
                 scanf("%d", &value);
                 root = delete(root, value);
                 break;
             
             case 7:
                 exit(0);
             
                 default:
                 printf("Invalid Choice!!!!!\n");
             }
             printf("\n");
         }
 }

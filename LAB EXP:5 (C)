#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char stack[100];
int top = -1;

void push(char ch){
    stack[++top] = ch;
}
char pop(){
    return stack[top--];
}
int precedence(char op){
    if(op =='+' || op == '-') return 1;
    if(op == '*' || op == '/') return 2;
    if(op == '^') return 3;
    return 0;
}
void reverseString(char* str){
    int n =strlen(str);
    for(int i =0;i<n /2;i++){
        char temp = str[i];
        str[i] = str[n-i-1];
        str[n-i-1] = temp;
    }
}
void infixToPostfix(char* infix, char* postfix) {
    int i,j=0;
    for(i =0;infix[i] != '\0';i++){
        if(isalnum(infix[i])) postfix[j++] = infix[i];
        else if(infix[i] == '(') push(infix[i]);
        else if(infix[i] == ')'){
            while(top != -1 && stack[top] != '(') postfix[j++] = pop();
            pop();
        } 
        else{
            while(top != -1 && precedence(stack[top]) >= precedence(infix[i])) postfix[j++] = pop();
            push(infix[i]);
        }
    }
    while(top != -1) postfix[j++] = pop();
    postfix[j] = '\0';
}
void infixToPrefix(char* infix, char* prefix){
    reverseString(infix);
    for(int i=0; infix[i] != '\0';i++){
        if(infix[i] == '(') infix[i] = ')';
        else if(infix[i] == ')') infix[i] = '(';
    }
    infixToPostfix(infix, prefix);
    reverseString(prefix);
}
int main(){
    char infix[100],postfix[100],prefix[100];
    printf("Enter infix expression : ");
    scanf("%s",infix);
    infixToPostfix(infix,postfix);
    infixToPrefix(infix,prefix);
    printf("Postfix Expression is %s\n",postfix);
    printf("Prefix Expression is %s\n",prefix);
    return 0;
}

#include<stdio.h>
 #include<stdlib.h>
 typedef struct TreeNode{ 
     struct TreeNode* left;
     int data;
     struct TreeNode* right;
 }Node;
 struct TreeNode* createNode(int data){
     Node* newNode = (Node*)malloc(sizeof(Node));
     newNode->data = data;
     newNode->left=newNode->right=NULL;
     return newNode;
 }
 Node* insert(Node* root,int value){
     if(root==NULL)
         return createNode(value);
         else {
 struct TreeNode* queue[100];
     int front =0 , rear = 0;
     queue[rear++]=root;
     while(front!=rear){
         struct TreeNode* temp = queue[front++];
         if(temp->left == NULL){
         temp->left = createNode(value);
         break;
         }
         else if(temp->right==NULL){
         temp->right = createNode(value);
         break;
         }
         else{
             queue[rear++]=temp->left;
             queue[rear++]=temp->right;
         }
     }
         }
 }
 void preorder(struct TreeNode* root){
     if(root!=NULL){
      printf("%d ",root->data);
      preorder(root->left);
      preorder(root->right);
     }
 }
 void inorder(struct TreeNode* root){
      if(root!=NULL){
          inorder(root->left);
          printf("%d ",root->data);
          inorder(root->right);
     }
 }
 void postorder(struct TreeNode* root){
  if(root!=NULL){
     postorder(root->left);
     postorder(root->right);
     printf("%d ",root->data);
  }
 }
 void levelorder(struct TreeNode* root){ // we use only queue for level Order 
     struct TreeNode* queue[100];
     int front =0 , rear = 0;
     queue[rear++]=root;
     while(front!=rear){
         struct TreeNode* temp = queue[front++];
         printf("%d ",temp->data);
         if(temp->left != NULL)
         queue[rear++]=temp->left;
         if(temp->right!=NULL)
         queue[rear++]=temp->right;
     }
 }
 Node* serach(struct TreeNode* root,int value){
          struct TreeNode* queue[100];
     int front =0 , rear = 0;
     queue[rear++]=root;
     while(front!=rear){
         struct TreeNode* temp = queue[front++];
       if(value==temp->data)
       return temp;
         if(temp->left != NULL)
         queue[rear++]=temp->left;
         if(temp->right!=NULL)
         queue[rear++]=temp->right;
     }
     return NULL;
 }
 Node* findDeepest(Node* root){
      struct TreeNode* queue[100];
     int front =0 , rear = 0;
     queue[rear++]=root;
     Node* temp;
     while(front!=rear){
         temp = queue[front++];
       if(temp->left!=NULL)
       queue[rear++]=temp->left;
       if(temp->right!=NULL)
       queue[rear++]=temp->right;
     }
     int i = (rear-2)/2;
     if(queue[i]->left==temp)
     queue[i]->left = NULL;
     else
     queue[i]->right = NULL;
     return temp;
 }
 void delete(struct TreeNode* root,int value){
         struct TreeNode* temp = serach(root,value);
         if(temp==NULL){
             printf("Element Not found !!!!\n");
         }
         else{
            struct TreeNode* last = findDeepest(root);
            temp->data = last->data;
            free(last);
            printf("Node Deleted !!!!\n");
         }
 }
 int main (){
         int choice,value;
         Node* root = NULL;
         while(1){
             printf("1.Insert\n");
             printf("2.Preorder\n");
             printf("3.Inorder\n");
             printf("4.Postorder\n");
             printf("5.Level Order\n");
             printf("6. Search\n");
             printf("7. Delete\n");
             printf("8.Exit\n");
             printf("Enter the choice = ");
             scanf("%d",&choice);
             switch(choice){
                 case 1:
                 printf("Enter value to insert: ");
                 scanf("%d", &value);
                 root = insert(root, value);
                 break;
             
             case 2:
                 printf("Preorder Traversal: ");
                 preorder(root);
                 break;
             
             case 3:
                 printf("Inorder Traversal: ");
                 inorder(root);
                 break;
             
             case 4:
                 printf("Postorder Traversal: ");
                 postorder(root);
                 break;
             
             case 5:
                 printf("Level Order Traversal: ");
                 levelorder(root);
                 break;
             
             case 6:
                 printf("Enter value to search: ");
                 scanf("%d", &value);
                 if (serach(root, value) != NULL)
                     printf("Value found!\n");
                 else
                     printf("Value not found!\n");
                 break;
             
             case 7:
                 printf("Enter value to delete: ");
                 scanf("%d", &value);
                 delete(root, value);
                 break;
             
             case 8:
                 exit(0);
             
                 default:
                 printf("Invalid Choice!!!!!\n");
             }
             printf("\n");
         }
 }
